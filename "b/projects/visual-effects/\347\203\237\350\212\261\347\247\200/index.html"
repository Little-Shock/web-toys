<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>烟花秀 - Little Shock</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: #000;
            user-select: none;
            touch-action: none;
        }
        canvas { display: block; width: 100vw; height: 100vh; }
        .back-link {
            position: fixed;
            top: 20px;
            left: 20px;
            color: #fff;
            text-decoration: none;
            background: rgba(0,0,0,0.5);
            padding: 6px 10px;
            border-radius: 4px;
            z-index: 1000;
            font-size: 14px;
            transition: background 0.3s;
        }
        .back-link:hover { background: rgba(255,255,255,0.2); }
    </style>
</head>
<body>
    <a href="/" class="back-link" id="backToHome">返回主菜单</a>
    <canvas id="canvas"></canvas>
    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        let w, h;
        function resize() {
            w = canvas.width = window.innerWidth;
            h = canvas.height = window.innerHeight;
        }
        window.addEventListener('resize', resize);
        resize();

        const fireworks = [];
        const particles = [];

        function random(min, max) { return Math.random() * (max - min) + min; }

        class Firework {
            constructor(x, y, color) {
                this.x = x; this.y = y;
                this.vx = random(-3, 3);
                this.vy = random(-8, -5);
                this.color = color;
                this.exploded = false;
            }
            update() {
                if (!this.exploded) {
                    this.vy += 0.1;
                    this.x += this.vx;
                    this.y += this.vy;
                    if (this.vy >= 0) {
                        this.exploded = true;
                        for (let i = 0; i < 30; i++) {
                            particles.push(new Particle(this.x, this.y, this.color));
                        }
                    }
                }
            }
            draw() {
                if (!this.exploded) {
                    ctx.fillStyle = this.color;
                    ctx.beginPath();
                    ctx.arc(this.x, this.y, 3, 0, Math.PI * 2);
                    ctx.fill();
                }
            }
        }

        class Particle {
            constructor(x, y, color) {
                this.x = x; this.y = y;
                const angle = random(0, Math.PI * 2);
                const speed = random(1, 5);
                this.vx = Math.cos(angle) * speed;
                this.vy = Math.sin(angle) * speed;
                this.life = 60;
                this.color = color;
            }
            update() {
                this.vy += 0.05;
                this.x += this.vx;
                this.y += this.vy;
                this.life--;
            }
            draw() {
                ctx.globalAlpha = Math.max(this.life / 60, 0);
                ctx.fillStyle = this.color;
                ctx.beginPath();
                ctx.arc(this.x, this.y, 2, 0, Math.PI * 2);
                ctx.fill();
                ctx.globalAlpha = 1;
            }
        }

        function launch(x, y) {
            const color = `hsl(${random(0, 360)}, 80%, 60%)`;
            fireworks.push(new Firework(x, y, color));
        }

        canvas.addEventListener('pointerdown', e => {
            const rect = canvas.getBoundingClientRect();
            launch(e.clientX - rect.left, e.clientY - rect.top);
        });

        function animate() {
            requestAnimationFrame(animate);
            ctx.fillStyle = 'rgba(0,0,0,0.2)';
            ctx.fillRect(0, 0, w, h);
            for (let i = fireworks.length - 1; i >= 0; i--) {
                const fw = fireworks[i];
                fw.update();
                fw.draw();
                if (fw.exploded) fireworks.splice(i, 1);
            }
            for (let i = particles.length - 1; i >= 0; i--) {
                const p = particles[i];
                p.update();
                p.draw();
                if (p.life <= 0) particles.splice(i, 1);
            }
        }
        animate();
    </script>
    <script src="/js/back-link-fix-new.js"></script>
    <script src="../../../js/back-link-fix-mobile.js"></script>
</body>
</html>
